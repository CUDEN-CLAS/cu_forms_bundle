<?php


/**
 * Define site roles in code.
 *
 * Create a secure_permissions_data module directory and place this function
 * in secure_permissions_data.module.
 *
 * @return
 *   An array defining all the roles for the site.
 */
function cu_forms_bundle_secure_permissions_roles() {
  return array(
    'form_owner',
  );
}

/**
 * Define site permissions in code.
 *
 * Create a secure_permissions_data module directory and place this function
 * in secure_permissions_data.module.
 *
 * @param $role
 *   The role for which the permissions are being requested.
 *
 * @return
 *   An array defining all the permissions for the site.
 */

function cu_forms_bundle_secure_permissions($role) {
  $permissions = array(
    'administrator' => array(
      'access all webform results',
      'access own webform results',
      'access own webform submissions',
      'administer cu feedback module',
      'create webform content',
      'delete all webform submissions',
      'delete any webform content',
      'delete own webform content',
      'delete own webform submissions',
      'edit all webform submissions',
      'edit any webform content',
      'edit own webform content',
      'edit own webform submissions',
      'edit webform components',
    ),
    'anonymous user' => array(),
    'authenticated user' => array(
      'delete own webform submissions',
      'edit own webform submissions',
    ),
    'content_editor' => array(
      'access own webform results',
      'create webform content',
      'delete any webform content',
      'delete own webform content',
      'edit any webform content',
      'edit own webform content',
      'edit webform components',
    ),
    'form_owner' => array(
      'access own webform results',
      'create webform content',
      'delete any webform content',
      'delete own webform content',
      'edit own webform content',
      'edit webform components',
    ),
    'developer' => array(
      'access all webform results',
      'access own webform results',
      'access own webform submissions',
      'administer cu feedback module',
      'create webform content',
      'delete all webform submissions',
      'delete any webform content',
      'delete own webform content',
      'delete own webform submissions',
      'edit all webform submissions',
      'edit any webform content',
      'edit own webform content',
      'edit own webform submissions',
      'edit webform components',
    ),
    'edit_my_content' => array(),
    'site_owner' => array(
      'access all webform results',
      'access own webform results',
      'access own webform submissions',
      'administer cu feedback module',
      'create webform content',
      'delete all webform submissions',
      'delete any webform content',
      'delete own webform content',
      'delete own webform submissions',
      'edit all webform submissions',
      'edit any webform content',
      'edit own webform content',
      'edit own webform submissions',
      'edit webform components',
    ),
  );
  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_express_help()
 *
 * Add contextual help for Webforms.
 *
 * @param $variables
 *   Array with information about help hooks
 * @return $variables
 */
function cu_forms_bundle_express_help($variables) {
  $variables['node/add/webform'][] = array(
    'title' => 'Webform Help',
    'short_title' => 'Webform Help',
    'url' => 'http://www.colorado.edu/node/610',
  );
  $variables['node/%/webform'][] = array(
    'title' => 'Adding Webform Components',
    'short_title' => 'Webform Components',
    'url' => '/tutorial/v2/second-add-form-components',
  );
  $variables['node/%/webform/components/new/select'][] = array(
    'title' => 'Adding Select Options to Webforms',
    'short_title' => 'Webform Select Options',
    'url' => '/tutorial/v2/checkboxes-radio-buttons-select-lists',
  );
  $variables['node/%/webform/conditionals'][] = array(
    'title' => 'Webform Conditionals Help',
    'short_title' => 'Webform Conditionals',
    'url' => '/tutorial/v2/webform-conditional-actions',
  );
  $variables['node/%/webform/configure'][] = array(
    'title' => 'Adjust Webform Settings',
    'short_title' => 'Webform Settings',
    'url' => '/tutorial/v2/fourth-adjust-webform-settings',
  );
  $variables['node/%/webform/emails'][] = array(
    'title' => 'Configure Email Templates for Webforms',
    'short_title' => 'Webform Email Template',
    'url' => '/tutorial/v2/edit-email-submission-template',
  );
  $variables['node/%/webform-results'][] = array(
    'title' => 'Check Webform Results',
    'short_title' => 'Webform Results',
    'url' => '/tutorial/v2/check-webform-results',
  );
  $variables['admin/settings/feedback/settings'][] = array(
    'title' => 'Feedback Form Help',
    'short_title' => 'Feedback Form Help',
    'url' => '/node/16',
  );

  return array_map(
    function($a) {
      $a[0]['module'] = 'cu_forms_bundle';
      return $a;
    },
    $variables);
}

/**
 * Implements hook_express_help_field().
 */
function cu_forms_bundle_express_help_fields($variables) {
  $variables['webform_configure_form']['fields'] = array(
    'webform-captcha' => array(
      'title' => 'Add Spam Prevention to Webforms',
      'short_title' => 'Webform Spam Prevention',
      'url' => '/tutorial/v2/add-spam-prevention-webforms',
    ),
  );


  return array_map(
    function($a) {
      $a[0]['module'] = 'cu_forms_bundle';
      return $a;
    },
    $variables);
}

/**
 * Limit extensions in uploaded files via webform file field.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function cu_forms_bundle_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  // Hide certain pieces we don't want available.
  $form['validation']['extensions']['addextensions']['#access'] = FALSE;
  unset($form['validation']['extensions']['types']['media']);

  // Limit options of webform file extensions.
  $form['validation']['extensions']['types']['archives']['#options'] = array(
    'bz2' => 'bz2',
    'gz' => 'gz',
    'rar' => 'rar',
    'sit' => 'sit',
    'tar' => 'tar',
    'zip' => 'zip'
  );
  $form['validation']['extensions']['types']['documents']['#options'] = array(
    'txt' => 'txt',
    'rtf' => 'rtf',
    'html' => 'html',
    'pdf' => 'pdf',
    'doc' => 'doc',
    'docx' => 'docx',
    'odt' => 'odt',
    'ppt' => 'ppt',
    'pptx' => 'pptx',
    'odp' => 'odp',
    'xls' => 'xls',
    'xlsx' => 'xlsx',
    'ods' => 'ods',
    'xml' => 'xml'
  );
  $form['validation']['extensions']['types']['desktopimages']['#options'] = array(
    'bmp' => 'bmp',
    'eps' => 'eps',
    'tif' => 'tif',
    'pict' => 'pict',
    'psd' => 'psd'
  );
  $form['validation']['extensions']['types']['webimages']['#options'] = array(
    'gif' => 'gif',
    'jpg' => 'jpg',
    'png' => 'png'
  );
  $form['validation']['extensions']['addextensions']['#default_value'] = '';
}

/**
 * Implements hook_menu_alter().
 */
function cu_forms_bundle_menu_alter(&$items) {
  $list_role = user_roles($membersonly = FALSE, $permission = NULL);
  $rid = array_search('form_owner', $list_role);

  // If the user has form owner role, they have view all submissions, so we then cut out access in favor of the
  // user entity reference field on the webform content type.
  if (user_has_role($rid)) {
    $items['node/%webform_menu/webform-results']['access callback'] = 'cu_forms_bundle_webform_results_access';
    $items['node/%webform_menu/submission/%webform_menu_submission']['access callback'] = 'cu_forms_bundle_webform_results_access';
  }
}

/**
 * Implementation of hook_webform_results_access().
 *
 * Hooks from webform that we need to override to get our own permissions.
 */
function cu_forms_bundle_webform_results_access($node, $account = NULL) {
  return cu_forms_bundle_webform_access($node, $account);
}

/**
 * Implementation of hook_webform_submission_access().
 */
function cu_forms_bundle_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  return cu_forms_bundle_webform_access($node, $account);
}

/**
 * Returns true if account is a value in the webform results user
 * reference field on the webform content type.
 *
 * @param object $node
 *   The webform node.
 * @param object $account
 *   The user account, optional. Defaults to current user.
 *
 * @return bool
 *   Returns true if user is listed, false otherwise.
 */
function cu_forms_bundle_webform_access($node, $account = NULL) {
  global $user;
  $access = FALSE;

  // List of all users added via the user entity reference field in webform content type.
  $uid_form_sub = $node->field_webform_results_access['und'];

  // If your user has been added to the node, you can view submissions.
  foreach ($uid_form_sub as $uid) {
    if (in_array($user->uid, $uid)) {
      $access = TRUE;
    }
  }

  // If you are the author of the (webform) node, you can always view submissions.
  if ($node->uid === $user->uid) {
    $access = TRUE;
  }

  return $access;
}

/**
 * Implement hook_form_ID_alter().
 *
 * This hides the user entity reference to non-authors who are also form owners.
 */
function cu_forms_bundle_form_webform_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // Get list of roles and then return form owner as $rid.
  $list_role = user_roles($membersonly = FALSE, $permission = NULL);
  $rid = array_search('form_owner', $list_role);

  // Current user and author of the form--if they're a match, they can edit the user entity ref field.
  $uid = $user->uid;
  $author = $form['uid']['#value'];
  if ($uid !== $author && user_has_role($rid)) {
    drupal_set_message(t('hello'));
    $form['field_webform_results_access']['#access'] = 0;
  }
}
