<?php

/**
 * @file
 * This module sets up a boolean value for webforms to integrate with ServiceNow.
 */

function cu_servicenow_menu() {
  $items = [];

  $items['admin/config/content/servicenow'] = [
    'title' => t('ServiceNow Service Account'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_servicenow_config_form'),
    'access arguments' => array('administer modules'),
  ];

  return $items;
}

function cu_servicenow_config_form($form, &$form_state) {
  $form = [];

  $form['sn_environment'] = [
    '#type' => 'select',
    '#title' => t('ServiceNow Username'),
    '#options' => [
      'https://coloradosandbox.service-now.com' => t('Sandbox'),
      'https://colorado.service-now.com' => t('Production'),
    ],
    '#default_value' => variable_get('sn_environment', 'https://coloradosandbox.service-now.com'),
  ];

  $form['sn_status'] = [
    '#type' => 'select',
    '#title' => t('ServiceNow integration status'),
     '#options' => array(
        1 => t('Enabled'),
        0 => t('Disabled'),
     ),
    '#default_value' => variable_get('sn_status', TRUE),
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_form_form_id_alter().
 *
 * Move the SN checkbox to the publishing tab.
 */
function cu_servicenow_form_webform_node_form_alter(&$form, &$form_state) {
  $form['options']['field_cu_servicenow'] = $form['field_cu_servicenow'];
  unset($form['field_cu_servicenow']);
}

/**
 * Implements hook_form_alter().
 *
 * Add custom submit handler to send info to ServiceNow.
 */
function cu_servicenow_form_alter(&$form, &$form_state, $form_id) {
  $sn_disabled = variable_get('sn_status', TRUE);
  if ($sn_disabled == TRUE) {
    if (isset($form['#node']->webform) && $form['#node']->field_cu_servicenow['und'][0]['value'] && $form_id != 'webform_configure_form' && $form_id != 'webform_component_edit_form' && $form_id != 'webform_node_form') {
      $form['#submit'][] = 'servicenow_submit';
      //$form['#submit'][] = '_get_headers_from_curl_response';
    }
    if ($form_id == 'webform_configure_form') {
      $form['servicenow_incident_mapping'] = [
        '#type' => 'fieldset',
        '#title' => t('ServiceNow Incident Assignment'),
      ];

      $incidents = _servicenow_incident_assignments();
      $nid = $form['#node']->nid;

      $sn_incident = [];
      foreach ($incidents->result as $incident) {
        $sn_incident[$incident->sys_id] = $incident->u_nature_of_issue . ': ' . $incident->u_business_service;
      }
      asort($sn_incident);
      if (!empty($sn_incident)) {
        $options = $sn_incident;
      } else {
        $options = ['N/A' => 'N/A'];
      }

      $form['servicenow_incident_mapping']['options'] = [
        '#type' => 'select',
        //'#title' => t('ServiceNow Incident Assignment'),
        '#options' => $options,
        '#default_value' => variable_get('sn_incident_sys_id_' . $nid, ''),
      ];
      $form['#submit'][] = 'servicenow_incident_mapping_submit';
    }
    if ($form_id == 'webform_component_edit_form') {
      if ($form['#node']->field_cu_servicenow['und'][0]['value']) {
        $form['servicenow'] = [
          '#type' => 'fieldset',
          '#title' => t('ServiceNow'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#weight' => 5,
        ];
        $form['servicenow']['field_map'] = [
          '#type' => 'select',
          '#title' => t('Map this field to a ServiceNow Incident field below'),
          '#options' => [
            'N/A' => '-No selection-',
            'short_description' => 'Short Description',
            'description' => 'Description',
            'attachment' => 'Attachment',
          ],
          '#default_value' => variable_get('servicenow_field_mapping[$form[\'form_key\'][\'#default_value\']]', ''),
          '#weight' => 5,
          '#required' => TRUE,
        ];
        $form['#submit'][] = 'servicenow_save_field_map';
      }
    }
  }
}

function servicenow_incident_mapping_submit($form, &$form_state) {
  $nid = $form['#node']->nid;
  $sys_id = $form_state['values']['options'];
  $incidents = _servicenow_incident_assignments();

  $sn_full_incident_info = [];
  foreach ($incidents->result as $incident) {
    $sn_full_incident_info[$incident->sys_id] = ['nature_of_issue' => $incident->u_nature_of_issue, 'business_service' => $incident->u_business_service];
  }

  $output = [
    'sys_id' => $sys_id,
    'nature_of_issue' => $sn_full_incident_info[$sys_id]['nature_of_issue'],
    'business_service' => $sn_full_incident_info[$sys_id]['business_service'],
  ];

  variable_set('sn_incident_' . $nid, $output);
  variable_set('sn_incident_sys_id_' . $nid, $output['sys_id']);
  watchdog('cu_servicenow', t('Incident assignment has been made for NID: :nid', [':nid' => $nid]));
}

function servicenow_save_field_map($form, &$form_state) {
  $current_vars = variable_get('servicenow_field_mapping', []);
  if (isset($form_state['values']['servicenow']['field_map'])) {
    $sn_value = [$form_state['values']['form_key'] => $form_state['values']['servicenow']['field_map']];
    $sn_value = array_merge($current_vars, $sn_value);
    variable_set('servicenow_field_mapping', $sn_value);
    drupal_set_message(t('Successfully mapped webform field to ServiceNow.'), 'notice');
  }
}

/**
 * Custom submit handler for forms with SN integaration enabled.
 */
function servicenow_submit(&$form, &$form_state) {
  global $user;
  global $base_url;
  $nid = $form['#node']->nid;

  $file_id = $form_state['complete form']['submitted']['file']['#file']->fid;
  $file = $form_state['complete form']['submitted']['file']['#file'];
  $location = $base_url . '/sites/default/files/';
  $location = str_replace('public://', $location, $file->uri);

  // If the current node has SN enabled, do code, else move on.
  watchdog('cu_servicenow', 'ServiceNow custom submit handler was hit.');
  $form_values = $form_state['input']['submitted'];
  $servicenow_field_map = variable_get('servicenow_field_mapping', '');

  foreach($form_values as $key => $value) {
    if(key_exists($key, $servicenow_field_map)) {
      $sn[$servicenow_field_map[$key]] = $value;
    }
  }

  foreach ($form_values as $form_value) {
    if (key_exists('fid', $form_value)) {
      $sn['description'] = $sn['description'] . ' (File location: ' . $location . ')';
    }
  }

  $sn_incident_map = variable_get('sn_incident_' . $nid, []);

  $sn['task_for'] = $user->name;
  $sn['u_alternate_email'] = $user->mail;
  $sn['state'] = '9';
  $sn['contact_type'] = 'self-service';
  $sn['cmdb_ci'] = $sn_incident_map['business_service']; // Business Service
  $sn['u_nature_of_issue'] = $sn_incident_map['nature_of_issue']; // Nature of Issue

  $request = _servicenow_curl_request($sn);

  // Test uploading files
  $temp_sys_id = $request->result->sys_id;
  //$temp_sys_id = '648816114fa523000e7decee0210c79f'; // INC0478268 in sandbox

  $file_mimetype = $form_state['complete form']['submitted']['file']['#file']->filemime;

  _servicenow_upload_file($temp_sys_id, pathinfo($file->uri), $file_mimetype);
}

function _servicenow_incident_assignments() {
  global $conf;
  $incident_assignment = variable_get('sn_environment', 'https://coloradosandbox.service-now.com') . '/api/now/v2/table/u_inc_assignment?sysparm_fields=sys_id,u_business_service,u_nature_of_issue,u_active,sys_updated_on&sysparm_display_value=true&sysparm_exclude_reference_link=true';

  $ch = curl_init(); // initialize curl handle
  curl_setopt($ch, CURLOPT_HTTPHEADER, Array("Accept:application/json","Content-Type:application/json"));
  curl_setopt($ch, CURLOPT_USERPWD, $conf['sn_key']);
  curl_setopt($ch, CURLOPT_URL, $incident_assignment);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  $result = curl_exec($ch); // run the whole process
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_VERBOSE, 1);
  //$header = curl_exec($ch); // run the whole process
  curl_close($ch); // close cURL handler

  //$headers = _get_headers_from_curl_response($header);
  $result = json_decode($result);

  return $result;
}

/**
 * ServiceNow API call via cURL.
 *
 * Send in form_values from the custom submit handler.
 * The values must match available fields in ServiceNow.
 */
function _servicenow_curl_request($form_values) {
  global $conf;

  $request = variable_get('sn_environment', 'https://coloradosandbox.service-now.com') . '/api/now/table/incident';
  $content_encode = json_encode($form_values);

  $user_info = $conf['sn_key'];

  $ch = curl_init(); // initialize curl handle
  curl_setopt($ch, CURLOPT_HTTPHEADER, Array("Accept:application/json","Content-Type:application/json"));
  curl_setopt($ch, CURLOPT_USERPWD, $user_info);
  curl_setopt($ch, CURLOPT_URL, $request);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $content_encode);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  $result = curl_exec($ch); // run the whole process
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_VERBOSE, 1);
  //$header = curl_exec($ch); // run the whole process
  curl_close($ch); // close cURL handler

  //$headers = _get_headers_from_curl_response($header);
  $result = json_decode($result);

  //$result->headers = $headers;
  if ( (!isset($result->status)) && (!empty($result)) ) {
    $result->status = 'success';
  } else {
    $result->status = 'failure';
  }
  if ( ($result->status == 'failure') || (empty($result)) ) {
    watchdog('cu_servicenow', 'servicenow api not communicating correctly \_(ãƒ„)_/Â¯ api call: ' . $request);
    drupal_set_message(t('There was a problem sending your request to ServiceNow. Please contact the site owner.'), 'success');
    return null;
  } else {
    $inc_num = $result->result->number;
    drupal_set_message(t('Your incident number is :incident, please keep this number for your records.', array(':incident' => $inc_num)), 'success');
    return $result;
  }
}

/**
 * ServiceNow API call via cURL.
 *
 * Send in form_values from the custom submit handler.
 * The values must match available fields in ServiceNow.
 */
function _servicenow_upload_file($sys_id, $file_pathinfo, $file_mimetype) {
  global $conf;
  //$sys_id = '648816114fa523000e7decee0210c79f'; // INC0478268 in sandbox

  $request = variable_get('sn_environment', 'https://coloradosandbox.service-now.com');
  $request .= '/api/now/attachment/upload';

  $ch = curl_init();

  $user_info = $conf['sn_key'];
  // -F 'table_name=incident' -F 'table_sys_id=d71f7935c0a8016700802b64c67c11c6' -F 'encryption_context=undefined'-F 'uploadFile=@ location of the file on file system'

  $realpath = drupal_realpath($file_pathinfo['dirname'] . '/' . $file_pathinfo['basename']);

  $data = [
    'table_name' => 'incident',
    'table_sys_id' => $sys_id,
    'encryption_context' => 'undefined',
    'uploadFile' => new CURLFile($realpath, $file_mimetype, $file_pathinfo['basename']),
    //'uploadFile' => '@' . $file_id->uri,
  ];

  curl_setopt($ch, CURLOPT_URL, $request);
  //curl_setopt($ch, CURLOPT_HTTPHEADER, Array('Accept:application/json', 'Content-Type:multipart/form-data'));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_USERPWD, $user_info);

  $result = curl_exec($ch);

  if (curl_errno($ch)) {
    $result = curl_error($ch);
  }
  curl_close ($ch);
}

/**
 * Get headers from curl response for use later.
 */
function _get_headers_from_curl_response($response) {
  $headers = array();

  $header_text = substr($response, 0, strpos($response, "\r\n\r\n"));

  foreach (explode("\r\n", $header_text) as $i => $line)
    if ($i === 0)
      $headers['http_code'] = $line;
    else
    {
      list ($key, $value) = explode(': ', $line);

      $headers[$key] = $value;
    }

  return $headers;
}
